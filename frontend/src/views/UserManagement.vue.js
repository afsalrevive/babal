import { ref, reactive, computed, onMounted, h, watch } from 'vue';
import api from '@/api';
import { useAuthStore } from '@/stores/auth';
import { useMessage } from 'naive-ui';
import { hasPermission } from '@/utils/permissions';
import PermissionWrapper from '@/components/PermissionWrapper.vue';
import { iconMap } from '@/utils/iconMap';
import { NInput, NInputNumber, NButton, NDataTable, NTabs, NTabPane, NModal, NForm, NFormItem, NSelect, NText, NIcon, } from 'naive-ui';
const editIndex = ref(null);
const authStore = useAuthStore();
const message = useMessage();
const bulkAddMode = ref(false);
const bulkUsers = ref([]);
const showExtras = ref(false);
const responsiveColumns = computed(() => {
    return userColumns.value.filter(col => {
        if (col.type === 'selection')
            return true;
        const key = col.key;
        // always keep these
        if (['name', 'emp_id', 'department', 'permissions', 'actions'].includes(key)) {
            return true;
        }
        // the rest show only when toggled on
        return showExtras.value;
    });
});
// State
const users = ref([]);
const loadingUsers = ref(false);
const selectedRowKeys = ref([]);
const activeTab = ref('active');
const searchQuery = ref('');
const showBulkModal = ref(false);
const bulkGroups = ref([]);
const showUserModal = ref(false);
const editingUser = ref(null);
const userForm = reactive({
    name: '',
    full_name: '',
    email: '',
    emp_id: null,
    password: '',
    role_id: null,
    status: 'active'
});
const userFormRef = ref(null);
const showUserPermModal = ref(false);
const savingPerms = ref(false);
const aclPages = ref([]);
const permForm = reactive({});
const permFormRef = ref(null);
const userEffectivePerms = reactive({});
const rolePermMap = reactive({});
const initialUserOverrides = ref(new Set());
const checkingDuplicates = ref(false);
const pendingUsers = ref([]);
const isEmailValid = computed(() => {
    return !userForm.email || /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(userForm.email);
});
// Add new state variables
const showBulkConfirm = ref(false);
const showDeleteConfirm = ref(false);
const dirtyFields = reactive({
    status: false,
    role_id: false,
    department_id: false,
    group_id: false
});
// Modify bulkForm structure
const bulkForm = reactive({
    status: null,
    role_id: null,
});
const resetForm = () => {
    userForm.name = '';
    userForm.full_name = '';
    userForm.email = '';
    userForm.emp_id = null;
    userForm.password = '';
    userForm.role_id = null;
    userForm.status = 'active';
};
const changesList = computed(() => {
    const changes = [];
    if (dirtyFields.status) {
        if (bulkForm.status !== null) {
            const status = statusOptions.find(opt => opt.value === bulkForm.status)?.label;
            changes.push({ label: 'Status', value: status, clear: false });
        }
        else {
            changes.push({ label: 'Status', value: '', clear: true });
        }
    }
    if (dirtyFields.role_id) {
        if (bulkForm.role_id !== null) {
            const role = roleOptions.value.find(opt => opt.value === bulkForm.role_id)?.label;
            changes.push({ label: 'Role', value: role, clear: false });
        }
        else {
            changes.push({ label: 'Role', value: '', clear: true });
        }
    }
    return changes;
});
const canSaveNext = computed(() => {
    return Boolean(userForm.name.trim() &&
        userForm.full_name.trim() &&
        userForm.password.trim() &&
        userForm.role_id &&
        userForm.status &&
        isEmailValid.value);
});
const canSubmit = computed(() => {
    const baseValid = !!userForm.name.trim() &&
        !!userForm.full_name.trim() &&
        !!userForm.role_id &&
        !!userForm.status &&
        isEmailValid.value;
    // If editing, password can be blank; if adding, password is required
    const pwOk = editingUser.value
        ? true
        : userForm.password.trim().length > 0;
    // Bulk mode bypasses single submit entirely
    if (bulkAddMode.value) {
        return pendingUsers.value.length > 0;
    }
    return baseValid && pwOk;
});
watch(showBulkModal, (visible) => {
    if (!visible) {
        Object.assign(bulkForm, {
            status: null,
            role_id: null,
        });
    }
});
const autoGeneratedName = ref(true);
watch(() => userForm.full_name, (newVal) => {
    const cleaned = (newVal || '').replace(/\s+/g, '').toLowerCase();
    if (autoGeneratedName.value || !userForm.name || userForm.name === cleaned) {
        userForm.name = cleaned;
        autoGeneratedName.value = true;
    }
});
watch(() => userForm.name, (newVal) => {
    const expectedAuto = (userForm.full_name || '').replace(/\s+/g, '').toLowerCase();
    if (newVal !== expectedAuto) {
        autoGeneratedName.value = false;
    }
});
// Confirmation handler for bulk changes
function confirmBulkUpdate() {
    const hasChanges = Object.values(dirtyFields).some(v => v);
    if (!hasChanges) {
        message.warning('No changes to apply');
        return;
    }
    showBulkConfirm.value = true;
}
function handleSingleDelete(user) {
    selectedRowKeys.value = [user.id];
    showDeleteConfirm.value = true;
}
function markFieldDirty(field) {
    dirtyFields[field] = true;
}
function resetBulkForm() {
    bulkForm.status = null;
    bulkForm.role_id = null;
    bulkGroups.value = [];
    // Explicitly reset each dirty field
    dirtyFields.status = false;
    dirtyFields.role_id = false;
    dirtyFields.department_id = false;
    dirtyFields.group_id = false;
}
function cancelBulkEdit() {
    showBulkModal.value = false;
    resetBulkForm();
}
// Options
const statusOptions = [
    { label: 'Active', value: 'active' },
    { label: 'Inactive', value: 'inactive' }
];
const roleOptions = ref([]);
// Computed
const canWrite = computed(() => authStore.user?.is_admin || // ✅ Now exists on user object
    hasPermission(authStore.user?.perms ?? [], 'usermanagement', 'write'));
const filteredActiveUsers = computed(() => users.value.filter(u => u.status === 'active' && matchSearch(u)));
const filteredInactiveUsers = computed(() => users.value.filter(u => u.status === 'inactive' && matchSearch(u)));
function matchSearch(u) {
    return `${u.name} ${u.email} ${u.role.name} ${u.full_name} ${String(u.emp_id ?? '')}`
        .toLowerCase()
        .includes(searchQuery.value.toLowerCase());
}
const selectedUsers = computed(() => users.value.filter(u => selectedRowKeys.value.includes(u.id)));
const selectedUserNames = computed(() => selectedUsers.value.map(u => u.name).join(', '));
// Columns
const userColumns = ref([
    { type: 'selection', width: 50, fixed: 'left' },
    { title: 'Username', key: 'name', sorter: (a, b) => a.name.localeCompare(b.name), render: r => h('div', { class: 'cell-content' }, r.name) },
    { title: 'Full Name', key: 'full_name', sorter: (a, b) => a.full_name.localeCompare(b.full_name), render: r => h('div', { class: 'cell-content' }, r.full_name) },
    { title: 'Email', key: 'email', className: 'hidden-column', sorter: (a, b) => a.email.localeCompare(b.email), render: r => h('div', { class: 'cell-content' }, r.email) },
    { title: 'Emp ID', key: 'emp_id', render: r => h('div', { class: 'cell-content' }, r.emp_id != null ? String(r.emp_id) : '-'), sorter: (a, b) => (a.emp_id || 0) - (b.emp_id || 0) },
    { title: 'Role', key: 'role', render: r => h('div', { class: 'cell-content' }, r.role.name), sorter: (a, b) => a.role.name.localeCompare(b.role.name) },
    { title: 'Status', key: 'status', className: 'hidden-column', render: r => h('div', { class: 'cell-content' }, r.status) },
    {
        title: 'Last Seen',
        key: 'last_seen',
        className: 'hidden-column',
        sorter: (a, b) => (a.last_seen ? new Date(a.last_seen).getTime() : 0) -
            (b.last_seen ? new Date(b.last_seen).getTime() : 0),
        render: r => h('div', { class: 'cell-content' }, r.last_seen ? new Date(r.last_seen).toLocaleString() : '-')
    },
    {
        title: 'Permissions',
        key: 'permissions',
        render: user => h('div', { class: 'perm-cell' }, [
            ...aclPages.value.map(page => {
                const perm = userEffectivePerms[user.id]?.[page.id] || 'none';
                if (perm === 'none')
                    return null;
                return h(NIcon, {
                    component: page.iconComponent,
                    size: 22,
                    color: perm === 'write' ? '#237804' : '#d18d0f',
                    title: `${page.name} (${perm})`
                });
            }),
            canWrite.value
                ? h(NIcon, {
                    component: iconMap.key,
                    class: 'perm-edit-icon',
                    size: 20,
                    onClick: () => openUserPermissionsModal(user)
                })
                : null
        ].filter(Boolean))
    },
    {
        title: 'Actions',
        key: 'actions',
        render: user => canWrite.value
            ? h('div', { class: 'action-buttons' }, [
                h(NIcon, {
                    component: iconMap.edit,
                    class: 'edit-icon',
                    size: 20,
                    onClick: () => openEditUserModal(user)
                }),
                h(NIcon, {
                    component: iconMap.delete,
                    class: 'delete-icon',
                    size: 20,
                    onClick: (e) => {
                        e.stopPropagation();
                        handleSingleDelete(user);
                    }
                })
            ])
            : null
    }
]);
async function loadUserPagePerms(u) {
    const { data } = await api.get(`/api/users/${u.id}/page_permissions`);
    userEffectivePerms[u.id] = {};
    data.pages.forEach(p => {
        if (p.effective !== 'none')
            userEffectivePerms[u.id][p.id] = p.effective;
    });
}
function getPermissionOptions(pageId) {
    const base = rolePermMap[pageId] || 'none';
    return [
        { label: 'None', value: 'none' },
        { label: `Inherit (${base})`, value: 'inherit' },
        { label: 'Read', value: 'read' },
        { label: 'Write', value: 'write' }
    ];
}
function getPermissionHint(pageId, cur) {
    const base = rolePermMap[pageId] || 'none';
    if (cur === 'inherit')
        return `Inherit from role (${base})`;
    if (cur === 'none')
        return 'Explicit none';
    return `Override (${base})`;
}
async function fetchAll() {
    loadingUsers.value = true;
    try {
        const res = await api.get('/api/users');
        users.value = res.data.users;
        // now populate permissions for each one
        await Promise.all(users.value.map(u => loadUserPagePerms(u)));
    }
    finally {
        loadingUsers.value = false;
    }
}
async function fetchACLPages() {
    const res = await api.get('/api/pages');
    const pagesData = Array.isArray(res.data)
        ? res.data
        : res.data.pages || [];
    aclPages.value = pagesData.map((p) => {
        // EXACTLY as you had it originally:
        let iconKey = p.name.toLowerCase().replace('management', '');
        if (iconKey !== 'settings') {
            iconKey = iconKey.replace(/s$/, '');
        }
        return {
            id: Number(p.id),
            name: p.name,
            iconComponent: iconMap[iconKey] || iconMap.pages
        };
    });
}
function editPendingUser(index) {
    const user = pendingUsers.value[index];
    userForm.name = user.name;
    userForm.full_name = user.full_name;
    userForm.email = user.email;
    userForm.emp_id = user.emp_id;
    userForm.password = user.password;
    editIndex.value = index;
}
async function saveAndNext() {
    checkingDuplicates.value = true;
    try {
        // 1. Required local fields
        if (!userForm.name.trim() || !userForm.full_name.trim() || !userForm.password.trim()) {
            message.error('Name and Password are required');
            return;
        }
        // 2. Prepare duplicate check body
        const dupCheckBody = {
            name: userForm.name.trim(),
        };
        // Add optional fields if they exist
        if (userForm.email?.trim())
            dupCheckBody.email = userForm.email.trim();
        if (userForm.emp_id)
            dupCheckBody.emp_id = userForm.emp_id;
        if (editingUser.value)
            dupCheckBody.user_id = editingUser.value.id;
        // 3. Local duplicate check in pending list
        const dupInPending = pendingUsers.value.find((u, i) => {
            // Skip current edit index
            if (i === editIndex.value)
                return false;
            // Check name match
            if (u.name.toLowerCase() === userForm.name.trim().toLowerCase())
                return true;
            // Check email match if both exist
            if (userForm.email?.trim() && u.email &&
                u.email.toLowerCase() === userForm.email.trim().toLowerCase())
                return true;
            // Check emp_id match if both exist
            if (userForm.emp_id && u.emp_id && u.emp_id === userForm.emp_id)
                return true;
            return false;
        });
        if (dupInPending) {
            message.error('Duplicate in pending list - fix before saving');
            return;
        }
        // 4. Server duplicate check
        try {
            const { data } = await api.post('/api/users/check-duplicates', dupCheckBody);
            if (data.exists) {
                message.error(`Duplicate found in: ${data.fields.join(', ')}`);
                return;
            }
        }
        catch (error) {
            message.error('Duplicate check failed');
            return;
        }
        // 5. Build PendingUser
        const pu = {
            name: userForm.name.trim(),
            full_name: userForm.full_name.trim(),
            email: userForm.email?.trim() || '',
            emp_id: userForm.emp_id || null,
            password: userForm.password,
            status: 'pending',
            role_id: userForm.role_id
        };
        // 6. Insert or replace
        if (editIndex.value !== null) {
            pendingUsers.value[editIndex.value] = pu;
            editIndex.value = null;
        }
        else {
            pendingUsers.value.push(pu);
        }
        // 7. Clear inputs
        userForm.name = '';
        userForm.full_name = '';
        userForm.email = '';
        userForm.emp_id = null;
        userForm.password = '';
    }
    catch (err) {
        console.error('Error in saveAndNext:', err);
        message.error('Error adding to pending list');
    }
    finally {
        checkingDuplicates.value = false;
    }
}
function removePendingUser(index) {
    pendingUsers.value.splice(index, 1);
    if (editIndex.value === index) {
        editIndex.value = null;
        clearIndividualFields();
    }
}
function clearIndividualFields() {
    userForm.name = '';
    userForm.full_name = '';
    userForm.email = '';
    userForm.emp_id = null;
    userForm.password = '';
}
async function finishBulkAdd() {
    if (pendingUsers.value.length === 0) {
        message.error('No users to add');
        return;
    }
    try {
        // 2️⃣ Build payload, applying those meta‐fields to every pending user
        const usersPayload = pendingUsers.value.map(u => ({
            name: u.name,
            full_name: u.full_name,
            email: u.email || "", // ← always include an email field
            emp_id: u.emp_id || undefined,
            password: u.password,
            role_id: userForm.role_id,
            status: userForm.status
        }));
        // 3️⃣ Debug: inspect the exact payload
        console.log('>> Bulk-add payload:', usersPayload);
        // 4️⃣ Send it
        const res = await api.post('/api/users/bulk', { users: usersPayload });
        // 5️⃣ Determine how many came back
        let added = 0;
        if (Array.isArray(res.data.users)) {
            added = res.data.users.length;
        }
        else if (typeof res.data.success_count === 'number') {
            added = res.data.success_count;
        }
        else if (typeof res.data.message === 'string') {
            const m = res.data.message.match(/(\d+)/);
            added = m ? +m[1] : usersPayload.length;
        }
        message.success(`Successfully added ${added} users`);
        // 6️⃣ Cleanup
        pendingUsers.value = [];
        closeUserModal();
        await fetchAll();
    }
    catch (err) {
        console.error('Bulk-add error:', err.response?.data || err);
        if (err.response?.status === 207) {
            const body = err.response.data;
            const ok = body.success_count || 0;
            const fail = body.error_count || 0;
            message.warning(`Added ${ok} users; ${fail} failed`);
            pendingUsers.value = [];
            closeUserModal();
            await fetchAll();
            return;
        }
        message.error('Bulk add failed—see console for details');
    }
}
function handleBulkModeChange(newValue) {
    if (!newValue) {
        bulkUsers.value = [];
    }
}
;
onMounted(async () => {
    await fetchRoles();
    await fetchACLPages();
    await fetchAll();
});
async function performBulkDelete() {
    try {
        await api.delete('/api/users/bulk-delete', {
            data: { user_ids: selectedRowKeys.value }
        });
        message.success('Users deleted successfully');
        await fetchAll();
    }
    catch (error) {
        message.error('Bulk delete failed');
    }
    finally {
        selectedRowKeys.value = [];
        showDeleteConfirm.value = false;
    }
}
function openAddUserModal() {
    editingUser.value = null;
    Object.assign(userForm, {
        name: '',
        full_name: '',
        email: '',
        emp_id: null,
        password: '',
        role_id: null,
        status: 'active',
        department_id: null,
        group_id: null
    });
    showUserModal.value = true;
}
function openEditUserModal(u) {
    editingUser.value = u;
    Object.assign(userForm, {
        name: u.name, full_name: u.full_name, email: u.email, emp_id: u.emp_id,
        password: '', role_id: u.role.id, status: u.status
    });
    showUserModal.value = true;
}
function closeUserModal() {
    userForm.password = '';
    showUserModal.value = false;
    bulkAddMode.value = false;
    bulkUsers.value = [];
    resetForm();
}
;
async function submitUser() {
    // 1️⃣ Validate the form (including optional-email rule)
    const form = userFormRef.value;
    if (!form) {
        message.error('Form not initialized');
        return;
    }
    const isValid = await form.validate().catch(() => false);
    if (!isValid) {
        return; // inline errors shown by <n-form>
    }
    // 2️⃣ Build the payload with only the fields your API expects
    const payload = {
        name: userForm.name.trim(),
        full_name: userForm.full_name,
        role_id: userForm.role_id,
        status: userForm.status
    };
    if (userForm.email?.trim()) {
        payload.email = userForm.email.trim();
    }
    if (userForm.emp_id != null) {
        payload.emp_id = userForm.emp_id;
    }
    // 3️⃣ Include password: always for new users, only if set for edits
    const editing = Boolean(editingUser.value);
    if (!editing || userForm.password.trim()) {
        payload.password = userForm.password;
    }
    // 4️⃣ Duplicate-check: send user_id so your Flask endpoint ignores that record
    const dupCheckBody = {
        name: userForm.name,
        emp_id: userForm.emp_id
    };
    if (editing && editingUser.value) { // Ensures value exists
        dupCheckBody.user_id = editingUser.value.id;
    }
    if (editing) {
        dupCheckBody.user_id = editingUser.value.id;
    }
    const nameChanged = editingUser.value ? userForm.name !== editingUser.value.name : true;
    const empChanged = editingUser.value ? userForm.emp_id !== editingUser.value.emp_id : true;
    if (nameChanged || empChanged) {
        // ✅ Use the pre-built dupCheckBody (already handles user_id conditionally)
        const { data } = await api.post('/api/users/check-duplicates', dupCheckBody);
        if (data.exists) {
            message.error(`Duplicate found in: ${data.fields.join(', ')}`);
            return;
        }
    }
    // 5️⃣ Submit to the correct endpoint
    try {
        if (editing) {
            // PATCH /api/users/:id
            await api.patch(`/api/users/${editingUser.value.id}`, payload);
            message.success('User updated successfully');
        }
        else {
            // POST /api/users
            await api.post('/api/users', payload);
            message.success('User created successfully');
        }
        closeUserModal();
        await fetchAll();
    }
    catch (error) {
        // surface backend errors (e.g. 409 conflicts)
        const msg = error.response?.data?.message ||
            (editing ? 'Failed to update user' : 'Failed to create user');
        message.error(msg);
    }
}
async function fetchRoles() {
    try {
        const res = await api.get('/api/roles');
        roleOptions.value = res.data.roles.map(r => ({ label: r.name, value: r.id }));
    }
    catch {
        message.error('Failed to load roles');
    }
}
async function openUserPermissionsModal(user) {
    editingUser.value = user;
    showUserPermModal.value = false;
    initialUserOverrides.value.clear();
    try {
        const res = await api.get(`/api/users/${user.id}/page_permissions`);
        // Rebuild the ACL pages list and populate permForm
        aclPages.value = res.data.pages.map(p => {
            // Track role-level default
            rolePermMap[p.id] = p.role_perm;
            // Set form value to existing override or inherit
            permForm[p.id] = p.override ? p.effective : 'inherit';
            if (p.override) {
                initialUserOverrides.value.add(p.id);
            }
            // Map icon key exactly as elsewhere
            let iconKey = p.name.toLowerCase().replace('management', '');
            if (iconKey !== 'settings')
                iconKey = iconKey.replace(/s$/, '');
            return {
                id: p.id,
                name: p.name,
                iconComponent: iconMap[iconKey] || iconMap.pages
            };
        });
        showUserPermModal.value = true;
    }
    catch (err) {
        console.error('Failed to load permissions', err);
        message.error('Could not load permissions');
    }
}
async function submitUserPermissions() {
    if (!editingUser.value)
        return;
    savingPerms.value = true;
    const uid = editingUser.value.id;
    const toDelete = aclPages.value
        .filter(p => permForm[p.id] === 'inherit' && initialUserOverrides.value.has(p.id))
        .map(p => p.id);
    const toUpsert = aclPages.value
        .filter(p => permForm[p.id] !== 'inherit')
        .map(p => ({ page_id: p.id, operation: permForm[p.id] }));
    if (toDelete.length) {
        await api.delete(`/api/users/${uid}/permissions`, {
            data: { page_ids: toDelete }
        });
    }
    if (toUpsert.length) {
        await api.put(`/api/users/${uid}/permissions`, {
            permissions: toUpsert
        });
    }
    message.success('Permissions saved');
    await loadUserPagePerms(editingUser.value);
    showUserPermModal.value = false;
    savingPerms.value = false;
}
async function performBulkUpdate() {
    try {
        // Collect only dirty fields
        const updates = {};
        if (dirtyFields.status)
            updates.status = bulkForm.status;
        if (dirtyFields.role_id)
            updates.role_id = bulkForm.role_id;
        await api.patch('/api/users/bulk-update', {
            user_ids: selectedRowKeys.value,
            updates
        });
        message.success(`Updated ${selectedRowKeys.value.length} users`);
        await fetchAll();
        showBulkModal.value = false;
        showBulkConfirm.value = false;
        resetBulkForm();
    }
    catch (error) {
        message.error('Bulk update failed');
    }
}
function closeUserPermissionsModal() {
    showUserPermModal.value = false;
}
debugger; /* PartiallyEnd: #3632/scriptSetup.vue */
const __VLS_ctx = {};
let __VLS_components;
let __VLS_directives;
/** @type {__VLS_StyleScopedClasses['user-table']} */ ;
/** @type {__VLS_StyleScopedClasses['user-table']} */ ;
/** @type {__VLS_StyleScopedClasses['user-table']} */ ;
/** @type {__VLS_StyleScopedClasses['n-data-table-table']} */ ;
/** @type {__VLS_StyleScopedClasses['modal-card']} */ ;
/** @type {__VLS_StyleScopedClasses['modal-card']} */ ;
/** @type {__VLS_StyleScopedClasses['modal-card']} */ ;
/** @type {__VLS_StyleScopedClasses['toolbar']} */ ;
/** @type {__VLS_StyleScopedClasses['search-input']} */ ;
/** @type {__VLS_StyleScopedClasses['toolbar']} */ ;
/** @type {__VLS_StyleScopedClasses['search-input']} */ ;
/** @type {__VLS_StyleScopedClasses['cards-container']} */ ;
/** @type {__VLS_StyleScopedClasses['modal-card']} */ ;
/** @type {__VLS_StyleScopedClasses['modal-card']} */ ;
/** @type {__VLS_StyleScopedClasses['perm-row']} */ ;
// CSS variable injection 
// CSS variable injection end 
const __VLS_0 = {}.NCard;
/** @type {[typeof __VLS_components.NCard, typeof __VLS_components.nCard, typeof __VLS_components.NCard, typeof __VLS_components.nCard, ]} */ ;
// @ts-ignore
const __VLS_1 = __VLS_asFunctionalComponent(__VLS_0, new __VLS_0({}));
const __VLS_2 = __VLS_1({}, ...__VLS_functionalComponentArgsRest(__VLS_1));
var __VLS_4 = {};
__VLS_3.slots.default;
{
    const { header: __VLS_thisSlot } = __VLS_3.slots;
    const __VLS_5 = {}.NH2;
    /** @type {[typeof __VLS_components.NH2, typeof __VLS_components.nH2, typeof __VLS_components.NH2, typeof __VLS_components.nH2, ]} */ ;
    // @ts-ignore
    const __VLS_6 = __VLS_asFunctionalComponent(__VLS_5, new __VLS_5({}));
    const __VLS_7 = __VLS_6({}, ...__VLS_functionalComponentArgsRest(__VLS_6));
    __VLS_8.slots.default;
    var __VLS_8;
}
{
    const { 'header-extra': __VLS_thisSlot } = __VLS_3.slots;
    if (__VLS_ctx.canWrite) {
        const __VLS_9 = {}.NText;
        /** @type {[typeof __VLS_components.NText, typeof __VLS_components.nText, typeof __VLS_components.NText, typeof __VLS_components.nText, ]} */ ;
        // @ts-ignore
        const __VLS_10 = __VLS_asFunctionalComponent(__VLS_9, new __VLS_9({
            depth: "3",
        }));
        const __VLS_11 = __VLS_10({
            depth: "3",
        }, ...__VLS_functionalComponentArgsRest(__VLS_10));
        __VLS_12.slots.default;
        var __VLS_12;
    }
    else {
        const __VLS_13 = {}.NText;
        /** @type {[typeof __VLS_components.NText, typeof __VLS_components.nText, typeof __VLS_components.NText, typeof __VLS_components.nText, ]} */ ;
        // @ts-ignore
        const __VLS_14 = __VLS_asFunctionalComponent(__VLS_13, new __VLS_13({
            depth: "3",
        }));
        const __VLS_15 = __VLS_14({
            depth: "3",
        }, ...__VLS_functionalComponentArgsRest(__VLS_14));
        __VLS_16.slots.default;
        var __VLS_16;
    }
}
__VLS_asFunctionalElement(__VLS_intrinsicElements.div, __VLS_intrinsicElements.div)({
    ...{ class: "toolbar" },
});
const __VLS_17 = {}.NInput;
/** @type {[typeof __VLS_components.NInput, typeof __VLS_components.nInput, ]} */ ;
// @ts-ignore
const __VLS_18 = __VLS_asFunctionalComponent(__VLS_17, new __VLS_17({
    value: (__VLS_ctx.searchQuery),
    placeholder: "Search users...",
    clearable: true,
    ...{ class: "search-input" },
}));
const __VLS_19 = __VLS_18({
    value: (__VLS_ctx.searchQuery),
    placeholder: "Search users...",
    clearable: true,
    ...{ class: "search-input" },
}, ...__VLS_functionalComponentArgsRest(__VLS_18));
__VLS_asFunctionalElement(__VLS_intrinsicElements.div, __VLS_intrinsicElements.div)({
    ...{ class: "button-group" },
});
if (__VLS_ctx.canWrite) {
    const __VLS_21 = {}.NButton;
    /** @type {[typeof __VLS_components.NButton, typeof __VLS_components.nButton, typeof __VLS_components.NButton, typeof __VLS_components.nButton, ]} */ ;
    // @ts-ignore
    const __VLS_22 = __VLS_asFunctionalComponent(__VLS_21, new __VLS_21({
        ...{ 'onClick': {} },
        type: "primary",
        ...{ class: "action-button" },
    }));
    const __VLS_23 = __VLS_22({
        ...{ 'onClick': {} },
        type: "primary",
        ...{ class: "action-button" },
    }, ...__VLS_functionalComponentArgsRest(__VLS_22));
    let __VLS_25;
    let __VLS_26;
    let __VLS_27;
    const __VLS_28 = {
        onClick: (__VLS_ctx.openAddUserModal)
    };
    __VLS_24.slots.default;
    var __VLS_24;
}
const __VLS_29 = {}.NButton;
/** @type {[typeof __VLS_components.NButton, typeof __VLS_components.nButton, typeof __VLS_components.NButton, typeof __VLS_components.nButton, ]} */ ;
// @ts-ignore
const __VLS_30 = __VLS_asFunctionalComponent(__VLS_29, new __VLS_29({
    ...{ 'onClick': {} },
    ...{ class: "toggle-extras action-button" },
    size: "small",
}));
const __VLS_31 = __VLS_30({
    ...{ 'onClick': {} },
    ...{ class: "toggle-extras action-button" },
    size: "small",
}, ...__VLS_functionalComponentArgsRest(__VLS_30));
let __VLS_33;
let __VLS_34;
let __VLS_35;
const __VLS_36 = {
    onClick: (...[$event]) => {
        __VLS_ctx.showExtras = !__VLS_ctx.showExtras;
    }
};
__VLS_32.slots.default;
const __VLS_37 = {}.NIcon;
/** @type {[typeof __VLS_components.NIcon, typeof __VLS_components.nIcon, ]} */ ;
// @ts-ignore
const __VLS_38 = __VLS_asFunctionalComponent(__VLS_37, new __VLS_37({
    component: (__VLS_ctx.showExtras ? __VLS_ctx.iconMap.collapse : __VLS_ctx.iconMap.expand),
}));
const __VLS_39 = __VLS_38({
    component: (__VLS_ctx.showExtras ? __VLS_ctx.iconMap.collapse : __VLS_ctx.iconMap.expand),
}, ...__VLS_functionalComponentArgsRest(__VLS_38));
(__VLS_ctx.showExtras ? 'Hide Details' : 'Show Details');
var __VLS_32;
if (__VLS_ctx.selectedRowKeys.length && __VLS_ctx.canWrite) {
    __VLS_asFunctionalElement(__VLS_intrinsicElements.div, __VLS_intrinsicElements.div)({
        ...{ class: "bulk-action-buttons" },
    });
    const __VLS_41 = {}.NButton;
    /** @type {[typeof __VLS_components.NButton, typeof __VLS_components.nButton, typeof __VLS_components.NButton, typeof __VLS_components.nButton, ]} */ ;
    // @ts-ignore
    const __VLS_42 = __VLS_asFunctionalComponent(__VLS_41, new __VLS_41({
        ...{ 'onClick': {} },
        type: "primary",
        ...{ class: "action-button" },
    }));
    const __VLS_43 = __VLS_42({
        ...{ 'onClick': {} },
        type: "primary",
        ...{ class: "action-button" },
    }, ...__VLS_functionalComponentArgsRest(__VLS_42));
    let __VLS_45;
    let __VLS_46;
    let __VLS_47;
    const __VLS_48 = {
        onClick: (...[$event]) => {
            if (!(__VLS_ctx.selectedRowKeys.length && __VLS_ctx.canWrite))
                return;
            __VLS_ctx.showBulkModal = true;
        }
    };
    __VLS_44.slots.default;
    (__VLS_ctx.selectedRowKeys.length);
    var __VLS_44;
    const __VLS_49 = {}.NButton;
    /** @type {[typeof __VLS_components.NButton, typeof __VLS_components.nButton, typeof __VLS_components.NButton, typeof __VLS_components.nButton, ]} */ ;
    // @ts-ignore
    const __VLS_50 = __VLS_asFunctionalComponent(__VLS_49, new __VLS_49({
        ...{ 'onClick': {} },
        type: "error",
        ...{ class: "action-button" },
    }));
    const __VLS_51 = __VLS_50({
        ...{ 'onClick': {} },
        type: "error",
        ...{ class: "action-button" },
    }, ...__VLS_functionalComponentArgsRest(__VLS_50));
    let __VLS_53;
    let __VLS_54;
    let __VLS_55;
    const __VLS_56 = {
        onClick: (...[$event]) => {
            if (!(__VLS_ctx.selectedRowKeys.length && __VLS_ctx.canWrite))
                return;
            __VLS_ctx.showDeleteConfirm = true;
        }
    };
    __VLS_52.slots.default;
    var __VLS_52;
}
const __VLS_57 = {}.NTabs;
/** @type {[typeof __VLS_components.NTabs, typeof __VLS_components.nTabs, typeof __VLS_components.NTabs, typeof __VLS_components.nTabs, ]} */ ;
// @ts-ignore
const __VLS_58 = __VLS_asFunctionalComponent(__VLS_57, new __VLS_57({
    value: (__VLS_ctx.activeTab),
    type: "card",
}));
const __VLS_59 = __VLS_58({
    value: (__VLS_ctx.activeTab),
    type: "card",
}, ...__VLS_functionalComponentArgsRest(__VLS_58));
__VLS_60.slots.default;
const __VLS_61 = {}.NTabPane;
/** @type {[typeof __VLS_components.NTabPane, typeof __VLS_components.nTabPane, typeof __VLS_components.NTabPane, typeof __VLS_components.nTabPane, ]} */ ;
// @ts-ignore
const __VLS_62 = __VLS_asFunctionalComponent(__VLS_61, new __VLS_61({
    name: "active",
    tab: "Active Users",
}));
const __VLS_63 = __VLS_62({
    name: "active",
    tab: "Active Users",
}, ...__VLS_functionalComponentArgsRest(__VLS_62));
__VLS_64.slots.default;
const __VLS_65 = {}.NDataTable;
/** @type {[typeof __VLS_components.NDataTable, typeof __VLS_components.nDataTable, ]} */ ;
// @ts-ignore
const __VLS_66 = __VLS_asFunctionalComponent(__VLS_65, new __VLS_65({
    tableLayout: "auto",
    ...{ class: (['user-table', { 'show-extras': __VLS_ctx.showExtras }]) },
    columns: (__VLS_ctx.responsiveColumns),
    data: (__VLS_ctx.filteredActiveUsers),
    loading: (__VLS_ctx.loadingUsers),
    rowKey: (r => r.id),
    checkedRowKeys: (__VLS_ctx.selectedRowKeys),
}));
const __VLS_67 = __VLS_66({
    tableLayout: "auto",
    ...{ class: (['user-table', { 'show-extras': __VLS_ctx.showExtras }]) },
    columns: (__VLS_ctx.responsiveColumns),
    data: (__VLS_ctx.filteredActiveUsers),
    loading: (__VLS_ctx.loadingUsers),
    rowKey: (r => r.id),
    checkedRowKeys: (__VLS_ctx.selectedRowKeys),
}, ...__VLS_functionalComponentArgsRest(__VLS_66));
var __VLS_64;
const __VLS_69 = {}.NTabPane;
/** @type {[typeof __VLS_components.NTabPane, typeof __VLS_components.nTabPane, typeof __VLS_components.NTabPane, typeof __VLS_components.nTabPane, ]} */ ;
// @ts-ignore
const __VLS_70 = __VLS_asFunctionalComponent(__VLS_69, new __VLS_69({
    name: "inactive",
    tab: "Inactive Users",
}));
const __VLS_71 = __VLS_70({
    name: "inactive",
    tab: "Inactive Users",
}, ...__VLS_functionalComponentArgsRest(__VLS_70));
__VLS_72.slots.default;
const __VLS_73 = {}.NDataTable;
/** @type {[typeof __VLS_components.NDataTable, typeof __VLS_components.nDataTable, ]} */ ;
// @ts-ignore
const __VLS_74 = __VLS_asFunctionalComponent(__VLS_73, new __VLS_73({
    tableLayout: "auto",
    ...{ class: (['user-table', { 'show-extras': __VLS_ctx.showExtras }]) },
    columns: (__VLS_ctx.responsiveColumns),
    data: (__VLS_ctx.filteredInactiveUsers),
    loading: (__VLS_ctx.loadingUsers),
    rowKey: (r => r.id),
    checkedRowKeys: (__VLS_ctx.selectedRowKeys),
}));
const __VLS_75 = __VLS_74({
    tableLayout: "auto",
    ...{ class: (['user-table', { 'show-extras': __VLS_ctx.showExtras }]) },
    columns: (__VLS_ctx.responsiveColumns),
    data: (__VLS_ctx.filteredInactiveUsers),
    loading: (__VLS_ctx.loadingUsers),
    rowKey: (r => r.id),
    checkedRowKeys: (__VLS_ctx.selectedRowKeys),
}, ...__VLS_functionalComponentArgsRest(__VLS_74));
var __VLS_72;
var __VLS_60;
const __VLS_77 = {}.NModal;
/** @type {[typeof __VLS_components.NModal, typeof __VLS_components.nModal, typeof __VLS_components.NModal, typeof __VLS_components.nModal, ]} */ ;
// @ts-ignore
const __VLS_78 = __VLS_asFunctionalComponent(__VLS_77, new __VLS_77({
    show: (__VLS_ctx.showBulkModal),
    preset: "card",
    ...{ style: {} },
}));
const __VLS_79 = __VLS_78({
    show: (__VLS_ctx.showBulkModal),
    preset: "card",
    ...{ style: {} },
}, ...__VLS_functionalComponentArgsRest(__VLS_78));
__VLS_80.slots.default;
{
    const { header: __VLS_thisSlot } = __VLS_80.slots;
    const __VLS_81 = {}.NH3;
    /** @type {[typeof __VLS_components.NH3, typeof __VLS_components.nH3, typeof __VLS_components.NH3, typeof __VLS_components.nH3, ]} */ ;
    // @ts-ignore
    const __VLS_82 = __VLS_asFunctionalComponent(__VLS_81, new __VLS_81({}));
    const __VLS_83 = __VLS_82({}, ...__VLS_functionalComponentArgsRest(__VLS_82));
    __VLS_84.slots.default;
    var __VLS_84;
    const __VLS_85 = {}.NText;
    /** @type {[typeof __VLS_components.NText, typeof __VLS_components.nText, typeof __VLS_components.NText, typeof __VLS_components.nText, ]} */ ;
    // @ts-ignore
    const __VLS_86 = __VLS_asFunctionalComponent(__VLS_85, new __VLS_85({
        depth: "3",
    }));
    const __VLS_87 = __VLS_86({
        depth: "3",
    }, ...__VLS_functionalComponentArgsRest(__VLS_86));
    __VLS_88.slots.default;
    (__VLS_ctx.selectedRowKeys.length);
    var __VLS_88;
}
__VLS_asFunctionalElement(__VLS_intrinsicElements.div, __VLS_intrinsicElements.div)({
    ...{ class: "bulk-modal-content" },
});
__VLS_asFunctionalElement(__VLS_intrinsicElements.div, __VLS_intrinsicElements.div)({
    ...{ class: "selected-users-section" },
});
const __VLS_89 = {}.NText;
/** @type {[typeof __VLS_components.NText, typeof __VLS_components.nText, typeof __VLS_components.NText, typeof __VLS_components.nText, ]} */ ;
// @ts-ignore
const __VLS_90 = __VLS_asFunctionalComponent(__VLS_89, new __VLS_89({
    strong: true,
}));
const __VLS_91 = __VLS_90({
    strong: true,
}, ...__VLS_functionalComponentArgsRest(__VLS_90));
__VLS_92.slots.default;
var __VLS_92;
const __VLS_93 = {}.NScrollbar;
/** @type {[typeof __VLS_components.NScrollbar, typeof __VLS_components.nScrollbar, typeof __VLS_components.NScrollbar, typeof __VLS_components.nScrollbar, ]} */ ;
// @ts-ignore
const __VLS_94 = __VLS_asFunctionalComponent(__VLS_93, new __VLS_93({
    ...{ style: {} },
    ...{ class: "user-list" },
}));
const __VLS_95 = __VLS_94({
    ...{ style: {} },
    ...{ class: "user-list" },
}, ...__VLS_functionalComponentArgsRest(__VLS_94));
__VLS_96.slots.default;
(__VLS_ctx.selectedUserNames);
var __VLS_96;
const __VLS_97 = {}.NForm;
/** @type {[typeof __VLS_components.NForm, typeof __VLS_components.nForm, typeof __VLS_components.NForm, typeof __VLS_components.nForm, ]} */ ;
// @ts-ignore
const __VLS_98 = __VLS_asFunctionalComponent(__VLS_97, new __VLS_97({
    ...{ class: "bulk-form" },
}));
const __VLS_99 = __VLS_98({
    ...{ class: "bulk-form" },
}, ...__VLS_functionalComponentArgsRest(__VLS_98));
__VLS_100.slots.default;
const __VLS_101 = {}.NFormItem;
/** @type {[typeof __VLS_components.NFormItem, typeof __VLS_components.nFormItem, typeof __VLS_components.NFormItem, typeof __VLS_components.nFormItem, ]} */ ;
// @ts-ignore
const __VLS_102 = __VLS_asFunctionalComponent(__VLS_101, new __VLS_101({
    label: "Status",
}));
const __VLS_103 = __VLS_102({
    label: "Status",
}, ...__VLS_functionalComponentArgsRest(__VLS_102));
__VLS_104.slots.default;
const __VLS_105 = {}.NSelect;
/** @type {[typeof __VLS_components.NSelect, typeof __VLS_components.nSelect, ]} */ ;
// @ts-ignore
const __VLS_106 = __VLS_asFunctionalComponent(__VLS_105, new __VLS_105({
    ...{ 'onUpdate:value': {} },
    value: (__VLS_ctx.bulkForm.status),
    options: (__VLS_ctx.statusOptions),
    placeholder: "Select status",
    clearable: true,
}));
const __VLS_107 = __VLS_106({
    ...{ 'onUpdate:value': {} },
    value: (__VLS_ctx.bulkForm.status),
    options: (__VLS_ctx.statusOptions),
    placeholder: "Select status",
    clearable: true,
}, ...__VLS_functionalComponentArgsRest(__VLS_106));
let __VLS_109;
let __VLS_110;
let __VLS_111;
const __VLS_112 = {
    'onUpdate:value': (() => __VLS_ctx.markFieldDirty('status'))
};
var __VLS_108;
var __VLS_104;
const __VLS_113 = {}.NFormItem;
/** @type {[typeof __VLS_components.NFormItem, typeof __VLS_components.nFormItem, typeof __VLS_components.NFormItem, typeof __VLS_components.nFormItem, ]} */ ;
// @ts-ignore
const __VLS_114 = __VLS_asFunctionalComponent(__VLS_113, new __VLS_113({
    label: "Role",
}));
const __VLS_115 = __VLS_114({
    label: "Role",
}, ...__VLS_functionalComponentArgsRest(__VLS_114));
__VLS_116.slots.default;
const __VLS_117 = {}.NSelect;
/** @type {[typeof __VLS_components.NSelect, typeof __VLS_components.nSelect, ]} */ ;
// @ts-ignore
const __VLS_118 = __VLS_asFunctionalComponent(__VLS_117, new __VLS_117({
    ...{ 'onUpdate:value': {} },
    value: (__VLS_ctx.bulkForm.role_id),
    options: (__VLS_ctx.roleOptions),
    placeholder: "Select role",
    clearable: true,
}));
const __VLS_119 = __VLS_118({
    ...{ 'onUpdate:value': {} },
    value: (__VLS_ctx.bulkForm.role_id),
    options: (__VLS_ctx.roleOptions),
    placeholder: "Select role",
    clearable: true,
}, ...__VLS_functionalComponentArgsRest(__VLS_118));
let __VLS_121;
let __VLS_122;
let __VLS_123;
const __VLS_124 = {
    'onUpdate:value': (() => __VLS_ctx.markFieldDirty('role_id'))
};
var __VLS_120;
var __VLS_116;
var __VLS_100;
__VLS_asFunctionalElement(__VLS_intrinsicElements.div, __VLS_intrinsicElements.div)({
    ...{ class: "form-actions" },
});
const __VLS_125 = {}.NButton;
/** @type {[typeof __VLS_components.NButton, typeof __VLS_components.nButton, typeof __VLS_components.NButton, typeof __VLS_components.nButton, ]} */ ;
// @ts-ignore
const __VLS_126 = __VLS_asFunctionalComponent(__VLS_125, new __VLS_125({
    ...{ 'onClick': {} },
    type: "primary",
}));
const __VLS_127 = __VLS_126({
    ...{ 'onClick': {} },
    type: "primary",
}, ...__VLS_functionalComponentArgsRest(__VLS_126));
let __VLS_129;
let __VLS_130;
let __VLS_131;
const __VLS_132 = {
    onClick: (__VLS_ctx.confirmBulkUpdate)
};
__VLS_128.slots.default;
var __VLS_128;
const __VLS_133 = {}.NButton;
/** @type {[typeof __VLS_components.NButton, typeof __VLS_components.nButton, typeof __VLS_components.NButton, typeof __VLS_components.nButton, ]} */ ;
// @ts-ignore
const __VLS_134 = __VLS_asFunctionalComponent(__VLS_133, new __VLS_133({
    ...{ 'onClick': {} },
    secondary: true,
}));
const __VLS_135 = __VLS_134({
    ...{ 'onClick': {} },
    secondary: true,
}, ...__VLS_functionalComponentArgsRest(__VLS_134));
let __VLS_137;
let __VLS_138;
let __VLS_139;
const __VLS_140 = {
    onClick: (__VLS_ctx.resetBulkForm)
};
__VLS_136.slots.default;
var __VLS_136;
const __VLS_141 = {}.NButton;
/** @type {[typeof __VLS_components.NButton, typeof __VLS_components.nButton, typeof __VLS_components.NButton, typeof __VLS_components.nButton, ]} */ ;
// @ts-ignore
const __VLS_142 = __VLS_asFunctionalComponent(__VLS_141, new __VLS_141({
    ...{ 'onClick': {} },
}));
const __VLS_143 = __VLS_142({
    ...{ 'onClick': {} },
}, ...__VLS_functionalComponentArgsRest(__VLS_142));
let __VLS_145;
let __VLS_146;
let __VLS_147;
const __VLS_148 = {
    onClick: (__VLS_ctx.cancelBulkEdit)
};
__VLS_144.slots.default;
var __VLS_144;
var __VLS_80;
const __VLS_149 = {}.NModal;
/** @type {[typeof __VLS_components.NModal, typeof __VLS_components.nModal, typeof __VLS_components.NModal, typeof __VLS_components.nModal, ]} */ ;
// @ts-ignore
const __VLS_150 = __VLS_asFunctionalComponent(__VLS_149, new __VLS_149({
    show: (__VLS_ctx.showBulkConfirm),
}));
const __VLS_151 = __VLS_150({
    show: (__VLS_ctx.showBulkConfirm),
}, ...__VLS_functionalComponentArgsRest(__VLS_150));
__VLS_152.slots.default;
const __VLS_153 = {}.NCard;
/** @type {[typeof __VLS_components.NCard, typeof __VLS_components.nCard, typeof __VLS_components.NCard, typeof __VLS_components.nCard, ]} */ ;
// @ts-ignore
const __VLS_154 = __VLS_asFunctionalComponent(__VLS_153, new __VLS_153({
    title: "Confirm Bulk Changes",
    ...{ style: {} },
}));
const __VLS_155 = __VLS_154({
    title: "Confirm Bulk Changes",
    ...{ style: {} },
}, ...__VLS_functionalComponentArgsRest(__VLS_154));
__VLS_156.slots.default;
const __VLS_157 = {}.NText;
/** @type {[typeof __VLS_components.NText, typeof __VLS_components.nText, typeof __VLS_components.NText, typeof __VLS_components.nText, ]} */ ;
// @ts-ignore
const __VLS_158 = __VLS_asFunctionalComponent(__VLS_157, new __VLS_157({}));
const __VLS_159 = __VLS_158({}, ...__VLS_functionalComponentArgsRest(__VLS_158));
__VLS_160.slots.default;
var __VLS_160;
const __VLS_161 = {}.NUl;
/** @type {[typeof __VLS_components.NUl, typeof __VLS_components.nUl, typeof __VLS_components.NUl, typeof __VLS_components.nUl, ]} */ ;
// @ts-ignore
const __VLS_162 = __VLS_asFunctionalComponent(__VLS_161, new __VLS_161({
    ...{ class: "changes-list" },
}));
const __VLS_163 = __VLS_162({
    ...{ class: "changes-list" },
}, ...__VLS_functionalComponentArgsRest(__VLS_162));
__VLS_164.slots.default;
for (const [change, index] of __VLS_getVForSourceType((__VLS_ctx.changesList))) {
    const __VLS_165 = {}.NLi;
    /** @type {[typeof __VLS_components.NLi, typeof __VLS_components.nLi, typeof __VLS_components.NLi, typeof __VLS_components.nLi, ]} */ ;
    // @ts-ignore
    const __VLS_166 = __VLS_asFunctionalComponent(__VLS_165, new __VLS_165({
        key: (index),
    }));
    const __VLS_167 = __VLS_166({
        key: (index),
    }, ...__VLS_functionalComponentArgsRest(__VLS_166));
    __VLS_168.slots.default;
    __VLS_asFunctionalElement(__VLS_intrinsicElements.span, __VLS_intrinsicElements.span)({
        ...{ class: "change-item" },
    });
    (change.label);
    if (change.clear) {
        const __VLS_169 = {}.NText;
        /** @type {[typeof __VLS_components.NText, typeof __VLS_components.nText, typeof __VLS_components.NText, typeof __VLS_components.nText, ]} */ ;
        // @ts-ignore
        const __VLS_170 = __VLS_asFunctionalComponent(__VLS_169, new __VLS_169({
            type: "error",
            ...{ class: "clear-indicator" },
        }));
        const __VLS_171 = __VLS_170({
            type: "error",
            ...{ class: "clear-indicator" },
        }, ...__VLS_functionalComponentArgsRest(__VLS_170));
        __VLS_172.slots.default;
        var __VLS_172;
    }
    else {
        const __VLS_173 = {}.NText;
        /** @type {[typeof __VLS_components.NText, typeof __VLS_components.nText, typeof __VLS_components.NText, typeof __VLS_components.nText, ]} */ ;
        // @ts-ignore
        const __VLS_174 = __VLS_asFunctionalComponent(__VLS_173, new __VLS_173({
            depth: "3",
        }));
        const __VLS_175 = __VLS_174({
            depth: "3",
        }, ...__VLS_functionalComponentArgsRest(__VLS_174));
        __VLS_176.slots.default;
        (change.value);
        var __VLS_176;
    }
    var __VLS_168;
}
var __VLS_164;
{
    const { footer: __VLS_thisSlot } = __VLS_156.slots;
    const __VLS_177 = {}.NSpace;
    /** @type {[typeof __VLS_components.NSpace, typeof __VLS_components.nSpace, typeof __VLS_components.NSpace, typeof __VLS_components.nSpace, ]} */ ;
    // @ts-ignore
    const __VLS_178 = __VLS_asFunctionalComponent(__VLS_177, new __VLS_177({
        justify: "end",
    }));
    const __VLS_179 = __VLS_178({
        justify: "end",
    }, ...__VLS_functionalComponentArgsRest(__VLS_178));
    __VLS_180.slots.default;
    const __VLS_181 = {}.NButton;
    /** @type {[typeof __VLS_components.NButton, typeof __VLS_components.nButton, typeof __VLS_components.NButton, typeof __VLS_components.nButton, ]} */ ;
    // @ts-ignore
    const __VLS_182 = __VLS_asFunctionalComponent(__VLS_181, new __VLS_181({
        ...{ 'onClick': {} },
    }));
    const __VLS_183 = __VLS_182({
        ...{ 'onClick': {} },
    }, ...__VLS_functionalComponentArgsRest(__VLS_182));
    let __VLS_185;
    let __VLS_186;
    let __VLS_187;
    const __VLS_188 = {
        onClick: (...[$event]) => {
            __VLS_ctx.showBulkConfirm = false;
        }
    };
    __VLS_184.slots.default;
    var __VLS_184;
    const __VLS_189 = {}.NButton;
    /** @type {[typeof __VLS_components.NButton, typeof __VLS_components.nButton, typeof __VLS_components.NButton, typeof __VLS_components.nButton, ]} */ ;
    // @ts-ignore
    const __VLS_190 = __VLS_asFunctionalComponent(__VLS_189, new __VLS_189({
        ...{ 'onClick': {} },
        type: "primary",
    }));
    const __VLS_191 = __VLS_190({
        ...{ 'onClick': {} },
        type: "primary",
    }, ...__VLS_functionalComponentArgsRest(__VLS_190));
    let __VLS_193;
    let __VLS_194;
    let __VLS_195;
    const __VLS_196 = {
        onClick: (__VLS_ctx.performBulkUpdate)
    };
    __VLS_192.slots.default;
    var __VLS_192;
    var __VLS_180;
}
var __VLS_156;
var __VLS_152;
const __VLS_197 = {}.NModal;
/** @type {[typeof __VLS_components.NModal, typeof __VLS_components.nModal, typeof __VLS_components.NModal, typeof __VLS_components.nModal, ]} */ ;
// @ts-ignore
const __VLS_198 = __VLS_asFunctionalComponent(__VLS_197, new __VLS_197({
    show: (__VLS_ctx.showDeleteConfirm),
}));
const __VLS_199 = __VLS_198({
    show: (__VLS_ctx.showDeleteConfirm),
}, ...__VLS_functionalComponentArgsRest(__VLS_198));
__VLS_200.slots.default;
const __VLS_201 = {}.NCard;
/** @type {[typeof __VLS_components.NCard, typeof __VLS_components.nCard, typeof __VLS_components.NCard, typeof __VLS_components.nCard, ]} */ ;
// @ts-ignore
const __VLS_202 = __VLS_asFunctionalComponent(__VLS_201, new __VLS_201({
    title: "Confirm User Deletion",
    ...{ style: {} },
}));
const __VLS_203 = __VLS_202({
    title: "Confirm User Deletion",
    ...{ style: {} },
}, ...__VLS_functionalComponentArgsRest(__VLS_202));
__VLS_204.slots.default;
const __VLS_205 = {}.NText;
/** @type {[typeof __VLS_components.NText, typeof __VLS_components.nText, typeof __VLS_components.NText, typeof __VLS_components.nText, ]} */ ;
// @ts-ignore
const __VLS_206 = __VLS_asFunctionalComponent(__VLS_205, new __VLS_205({
    strong: true,
}));
const __VLS_207 = __VLS_206({
    strong: true,
}, ...__VLS_functionalComponentArgsRest(__VLS_206));
__VLS_208.slots.default;
var __VLS_208;
const __VLS_209 = {}.NText;
/** @type {[typeof __VLS_components.NText, typeof __VLS_components.nText, typeof __VLS_components.NText, typeof __VLS_components.nText, ]} */ ;
// @ts-ignore
const __VLS_210 = __VLS_asFunctionalComponent(__VLS_209, new __VLS_209({
    depth: "3",
    block: true,
    ...{ class: "confirmation-user-list" },
}));
const __VLS_211 = __VLS_210({
    depth: "3",
    block: true,
    ...{ class: "confirmation-user-list" },
}, ...__VLS_functionalComponentArgsRest(__VLS_210));
__VLS_212.slots.default;
(__VLS_ctx.selectedUserNames);
var __VLS_212;
{
    const { footer: __VLS_thisSlot } = __VLS_204.slots;
    const __VLS_213 = {}.NSpace;
    /** @type {[typeof __VLS_components.NSpace, typeof __VLS_components.nSpace, typeof __VLS_components.NSpace, typeof __VLS_components.nSpace, ]} */ ;
    // @ts-ignore
    const __VLS_214 = __VLS_asFunctionalComponent(__VLS_213, new __VLS_213({
        justify: "end",
    }));
    const __VLS_215 = __VLS_214({
        justify: "end",
    }, ...__VLS_functionalComponentArgsRest(__VLS_214));
    __VLS_216.slots.default;
    const __VLS_217 = {}.NButton;
    /** @type {[typeof __VLS_components.NButton, typeof __VLS_components.nButton, typeof __VLS_components.NButton, typeof __VLS_components.nButton, ]} */ ;
    // @ts-ignore
    const __VLS_218 = __VLS_asFunctionalComponent(__VLS_217, new __VLS_217({
        ...{ 'onClick': {} },
    }));
    const __VLS_219 = __VLS_218({
        ...{ 'onClick': {} },
    }, ...__VLS_functionalComponentArgsRest(__VLS_218));
    let __VLS_221;
    let __VLS_222;
    let __VLS_223;
    const __VLS_224 = {
        onClick: (...[$event]) => {
            __VLS_ctx.showDeleteConfirm = false;
        }
    };
    __VLS_220.slots.default;
    var __VLS_220;
    const __VLS_225 = {}.NButton;
    /** @type {[typeof __VLS_components.NButton, typeof __VLS_components.nButton, typeof __VLS_components.NButton, typeof __VLS_components.nButton, ]} */ ;
    // @ts-ignore
    const __VLS_226 = __VLS_asFunctionalComponent(__VLS_225, new __VLS_225({
        ...{ 'onClick': {} },
        type: "error",
    }));
    const __VLS_227 = __VLS_226({
        ...{ 'onClick': {} },
        type: "error",
    }, ...__VLS_functionalComponentArgsRest(__VLS_226));
    let __VLS_229;
    let __VLS_230;
    let __VLS_231;
    const __VLS_232 = {
        onClick: (__VLS_ctx.performBulkDelete)
    };
    __VLS_228.slots.default;
    var __VLS_228;
    var __VLS_216;
}
var __VLS_204;
var __VLS_200;
const __VLS_233 = {}.NModal;
/** @type {[typeof __VLS_components.NModal, typeof __VLS_components.nModal, typeof __VLS_components.NModal, typeof __VLS_components.nModal, ]} */ ;
// @ts-ignore
const __VLS_234 = __VLS_asFunctionalComponent(__VLS_233, new __VLS_233({
    show: (__VLS_ctx.showUserModal),
}));
const __VLS_235 = __VLS_234({
    show: (__VLS_ctx.showUserModal),
}, ...__VLS_functionalComponentArgsRest(__VLS_234));
__VLS_236.slots.default;
const __VLS_237 = {}.NCard;
/** @type {[typeof __VLS_components.NCard, typeof __VLS_components.nCard, typeof __VLS_components.NCard, typeof __VLS_components.nCard, ]} */ ;
// @ts-ignore
const __VLS_238 = __VLS_asFunctionalComponent(__VLS_237, new __VLS_237({
    title: (__VLS_ctx.bulkAddMode ? 'Add Multiple Users' : (__VLS_ctx.editingUser ? 'Edit User' : 'Add User')),
}));
const __VLS_239 = __VLS_238({
    title: (__VLS_ctx.bulkAddMode ? 'Add Multiple Users' : (__VLS_ctx.editingUser ? 'Edit User' : 'Add User')),
}, ...__VLS_functionalComponentArgsRest(__VLS_238));
__VLS_240.slots.default;
const __VLS_241 = {}.NForm;
/** @type {[typeof __VLS_components.NForm, typeof __VLS_components.nForm, typeof __VLS_components.NForm, typeof __VLS_components.nForm, ]} */ ;
// @ts-ignore
const __VLS_242 = __VLS_asFunctionalComponent(__VLS_241, new __VLS_241({
    ref: "userFormRef",
    ...{ class: "user-form-grid" },
}));
const __VLS_243 = __VLS_242({
    ref: "userFormRef",
    ...{ class: "user-form-grid" },
}, ...__VLS_functionalComponentArgsRest(__VLS_242));
/** @type {typeof __VLS_ctx.userFormRef} */ ;
var __VLS_245 = {};
__VLS_244.slots.default;
if (!__VLS_ctx.editingUser) {
    const __VLS_247 = {}.NFormItem;
    /** @type {[typeof __VLS_components.NFormItem, typeof __VLS_components.nFormItem, typeof __VLS_components.NFormItem, typeof __VLS_components.nFormItem, ]} */ ;
    // @ts-ignore
    const __VLS_248 = __VLS_asFunctionalComponent(__VLS_247, new __VLS_247({
        label: "Bulk Add Mode",
    }));
    const __VLS_249 = __VLS_248({
        label: "Bulk Add Mode",
    }, ...__VLS_functionalComponentArgsRest(__VLS_248));
    __VLS_250.slots.default;
    const __VLS_251 = {}.NSwitch;
    /** @type {[typeof __VLS_components.NSwitch, typeof __VLS_components.nSwitch, ]} */ ;
    // @ts-ignore
    const __VLS_252 = __VLS_asFunctionalComponent(__VLS_251, new __VLS_251({
        ...{ 'onUpdate:value': {} },
        value: (__VLS_ctx.bulkAddMode),
    }));
    const __VLS_253 = __VLS_252({
        ...{ 'onUpdate:value': {} },
        value: (__VLS_ctx.bulkAddMode),
    }, ...__VLS_functionalComponentArgsRest(__VLS_252));
    let __VLS_255;
    let __VLS_256;
    let __VLS_257;
    const __VLS_258 = {
        'onUpdate:value': (__VLS_ctx.handleBulkModeChange)
    };
    var __VLS_254;
    var __VLS_250;
}
const __VLS_259 = {}.NFormItem;
/** @type {[typeof __VLS_components.NFormItem, typeof __VLS_components.nFormItem, typeof __VLS_components.NFormItem, typeof __VLS_components.nFormItem, ]} */ ;
// @ts-ignore
const __VLS_260 = __VLS_asFunctionalComponent(__VLS_259, new __VLS_259({
    label: "Role",
    path: "role_id",
    required: true,
}));
const __VLS_261 = __VLS_260({
    label: "Role",
    path: "role_id",
    required: true,
}, ...__VLS_functionalComponentArgsRest(__VLS_260));
__VLS_262.slots.default;
const __VLS_263 = {}.NSelect;
/** @type {[typeof __VLS_components.NSelect, typeof __VLS_components.nSelect, ]} */ ;
// @ts-ignore
const __VLS_264 = __VLS_asFunctionalComponent(__VLS_263, new __VLS_263({
    value: (__VLS_ctx.userForm.role_id),
    options: (__VLS_ctx.roleOptions),
}));
const __VLS_265 = __VLS_264({
    value: (__VLS_ctx.userForm.role_id),
    options: (__VLS_ctx.roleOptions),
}, ...__VLS_functionalComponentArgsRest(__VLS_264));
var __VLS_262;
const __VLS_267 = {}.NFormItem;
/** @type {[typeof __VLS_components.NFormItem, typeof __VLS_components.nFormItem, typeof __VLS_components.NFormItem, typeof __VLS_components.nFormItem, ]} */ ;
// @ts-ignore
const __VLS_268 = __VLS_asFunctionalComponent(__VLS_267, new __VLS_267({
    label: "Status",
    path: "status",
    required: true,
}));
const __VLS_269 = __VLS_268({
    label: "Status",
    path: "status",
    required: true,
}, ...__VLS_functionalComponentArgsRest(__VLS_268));
__VLS_270.slots.default;
const __VLS_271 = {}.NSelect;
/** @type {[typeof __VLS_components.NSelect, typeof __VLS_components.nSelect, ]} */ ;
// @ts-ignore
const __VLS_272 = __VLS_asFunctionalComponent(__VLS_271, new __VLS_271({
    value: (__VLS_ctx.userForm.status),
    options: (__VLS_ctx.statusOptions),
}));
const __VLS_273 = __VLS_272({
    value: (__VLS_ctx.userForm.status),
    options: (__VLS_ctx.statusOptions),
}, ...__VLS_functionalComponentArgsRest(__VLS_272));
var __VLS_270;
const __VLS_275 = {}.NFormItem;
/** @type {[typeof __VLS_components.NFormItem, typeof __VLS_components.nFormItem, typeof __VLS_components.NFormItem, typeof __VLS_components.nFormItem, ]} */ ;
// @ts-ignore
const __VLS_276 = __VLS_asFunctionalComponent(__VLS_275, new __VLS_275({
    label: "Full Name",
    path: "full_name",
    required: true,
}));
const __VLS_277 = __VLS_276({
    label: "Full Name",
    path: "full_name",
    required: true,
}, ...__VLS_functionalComponentArgsRest(__VLS_276));
__VLS_278.slots.default;
const __VLS_279 = {}.NInput;
/** @type {[typeof __VLS_components.NInput, typeof __VLS_components.nInput, ]} */ ;
// @ts-ignore
const __VLS_280 = __VLS_asFunctionalComponent(__VLS_279, new __VLS_279({
    value: (__VLS_ctx.userForm.full_name),
}));
const __VLS_281 = __VLS_280({
    value: (__VLS_ctx.userForm.full_name),
}, ...__VLS_functionalComponentArgsRest(__VLS_280));
var __VLS_278;
const __VLS_283 = {}.NFormItem;
/** @type {[typeof __VLS_components.NFormItem, typeof __VLS_components.nFormItem, typeof __VLS_components.NFormItem, typeof __VLS_components.nFormItem, ]} */ ;
// @ts-ignore
const __VLS_284 = __VLS_asFunctionalComponent(__VLS_283, new __VLS_283({
    label: "Username",
    path: "name",
    required: true,
}));
const __VLS_285 = __VLS_284({
    label: "Username",
    path: "name",
    required: true,
}, ...__VLS_functionalComponentArgsRest(__VLS_284));
__VLS_286.slots.default;
const __VLS_287 = {}.NInput;
/** @type {[typeof __VLS_components.NInput, typeof __VLS_components.nInput, ]} */ ;
// @ts-ignore
const __VLS_288 = __VLS_asFunctionalComponent(__VLS_287, new __VLS_287({
    value: (__VLS_ctx.userForm.name),
}));
const __VLS_289 = __VLS_288({
    value: (__VLS_ctx.userForm.name),
}, ...__VLS_functionalComponentArgsRest(__VLS_288));
var __VLS_286;
const __VLS_291 = {}.NFormItem;
/** @type {[typeof __VLS_components.NFormItem, typeof __VLS_components.nFormItem, typeof __VLS_components.NFormItem, typeof __VLS_components.nFormItem, ]} */ ;
// @ts-ignore
const __VLS_292 = __VLS_asFunctionalComponent(__VLS_291, new __VLS_291({
    label: "Email",
    path: "email",
}));
const __VLS_293 = __VLS_292({
    label: "Email",
    path: "email",
}, ...__VLS_functionalComponentArgsRest(__VLS_292));
__VLS_294.slots.default;
const __VLS_295 = {}.NInput;
/** @type {[typeof __VLS_components.NInput, typeof __VLS_components.nInput, ]} */ ;
// @ts-ignore
const __VLS_296 = __VLS_asFunctionalComponent(__VLS_295, new __VLS_295({
    value: (__VLS_ctx.userForm.email),
}));
const __VLS_297 = __VLS_296({
    value: (__VLS_ctx.userForm.email),
}, ...__VLS_functionalComponentArgsRest(__VLS_296));
var __VLS_294;
const __VLS_299 = {}.NFormItem;
/** @type {[typeof __VLS_components.NFormItem, typeof __VLS_components.nFormItem, typeof __VLS_components.NFormItem, typeof __VLS_components.nFormItem, ]} */ ;
// @ts-ignore
const __VLS_300 = __VLS_asFunctionalComponent(__VLS_299, new __VLS_299({
    label: "Employee ID",
    path: "emp_id",
}));
const __VLS_301 = __VLS_300({
    label: "Employee ID",
    path: "emp_id",
}, ...__VLS_functionalComponentArgsRest(__VLS_300));
__VLS_302.slots.default;
const __VLS_303 = {}.NInputNumber;
/** @type {[typeof __VLS_components.NInputNumber, typeof __VLS_components.nInputNumber, ]} */ ;
// @ts-ignore
const __VLS_304 = __VLS_asFunctionalComponent(__VLS_303, new __VLS_303({
    value: (__VLS_ctx.userForm.emp_id),
    min: (1),
}));
const __VLS_305 = __VLS_304({
    value: (__VLS_ctx.userForm.emp_id),
    min: (1),
}, ...__VLS_functionalComponentArgsRest(__VLS_304));
var __VLS_302;
const __VLS_307 = {}.NFormItem;
/** @type {[typeof __VLS_components.NFormItem, typeof __VLS_components.nFormItem, typeof __VLS_components.NFormItem, typeof __VLS_components.nFormItem, ]} */ ;
// @ts-ignore
const __VLS_308 = __VLS_asFunctionalComponent(__VLS_307, new __VLS_307({
    label: "Password",
    path: "password",
    required: (!__VLS_ctx.editingUser),
}));
const __VLS_309 = __VLS_308({
    label: "Password",
    path: "password",
    required: (!__VLS_ctx.editingUser),
}, ...__VLS_functionalComponentArgsRest(__VLS_308));
__VLS_310.slots.default;
const __VLS_311 = {}.NInput;
/** @type {[typeof __VLS_components.NInput, typeof __VLS_components.nInput, ]} */ ;
// @ts-ignore
const __VLS_312 = __VLS_asFunctionalComponent(__VLS_311, new __VLS_311({
    type: "password",
    value: (__VLS_ctx.userForm.password),
}));
const __VLS_313 = __VLS_312({
    type: "password",
    value: (__VLS_ctx.userForm.password),
}, ...__VLS_functionalComponentArgsRest(__VLS_312));
var __VLS_310;
var __VLS_244;
{
    const { footer: __VLS_thisSlot } = __VLS_240.slots;
    const __VLS_315 = {}.NSpace;
    /** @type {[typeof __VLS_components.NSpace, typeof __VLS_components.nSpace, typeof __VLS_components.NSpace, typeof __VLS_components.nSpace, ]} */ ;
    // @ts-ignore
    const __VLS_316 = __VLS_asFunctionalComponent(__VLS_315, new __VLS_315({
        vertical: true,
    }));
    const __VLS_317 = __VLS_316({
        vertical: true,
    }, ...__VLS_functionalComponentArgsRest(__VLS_316));
    __VLS_318.slots.default;
    if (__VLS_ctx.bulkAddMode && __VLS_ctx.pendingUsers.length > 0) {
        __VLS_asFunctionalElement(__VLS_intrinsicElements.div, __VLS_intrinsicElements.div)({});
        const __VLS_319 = {}.NText;
        /** @type {[typeof __VLS_components.NText, typeof __VLS_components.nText, typeof __VLS_components.NText, typeof __VLS_components.nText, ]} */ ;
        // @ts-ignore
        const __VLS_320 = __VLS_asFunctionalComponent(__VLS_319, new __VLS_319({
            strong: true,
        }));
        const __VLS_321 = __VLS_320({
            strong: true,
        }, ...__VLS_functionalComponentArgsRest(__VLS_320));
        __VLS_322.slots.default;
        var __VLS_322;
        __VLS_asFunctionalElement(__VLS_intrinsicElements.div, __VLS_intrinsicElements.div)({
            ...{ class: "cards-container" },
        });
        for (const [user, i] of __VLS_getVForSourceType((__VLS_ctx.pendingUsers))) {
            const __VLS_323 = {}.NCard;
            /** @type {[typeof __VLS_components.NCard, typeof __VLS_components.nCard, typeof __VLS_components.NCard, typeof __VLS_components.nCard, ]} */ ;
            // @ts-ignore
            const __VLS_324 = __VLS_asFunctionalComponent(__VLS_323, new __VLS_323({
                size: "small",
                key: (i),
                ...{ class: "pending-card" },
            }));
            const __VLS_325 = __VLS_324({
                size: "small",
                key: (i),
                ...{ class: "pending-card" },
            }, ...__VLS_functionalComponentArgsRest(__VLS_324));
            __VLS_326.slots.default;
            const __VLS_327 = {}.NSpace;
            /** @type {[typeof __VLS_components.NSpace, typeof __VLS_components.nSpace, typeof __VLS_components.NSpace, typeof __VLS_components.nSpace, ]} */ ;
            // @ts-ignore
            const __VLS_328 = __VLS_asFunctionalComponent(__VLS_327, new __VLS_327({
                vertical: true,
                size: "small",
            }));
            const __VLS_329 = __VLS_328({
                vertical: true,
                size: "small",
            }, ...__VLS_functionalComponentArgsRest(__VLS_328));
            __VLS_330.slots.default;
            const __VLS_331 = {}.NText;
            /** @type {[typeof __VLS_components.NText, typeof __VLS_components.nText, typeof __VLS_components.NText, typeof __VLS_components.nText, ]} */ ;
            // @ts-ignore
            const __VLS_332 = __VLS_asFunctionalComponent(__VLS_331, new __VLS_331({
                strong: true,
            }));
            const __VLS_333 = __VLS_332({
                strong: true,
            }, ...__VLS_functionalComponentArgsRest(__VLS_332));
            __VLS_334.slots.default;
            (user.name || 'Unnamed');
            var __VLS_334;
            const __VLS_335 = {}.NText;
            /** @type {[typeof __VLS_components.NText, typeof __VLS_components.nText, typeof __VLS_components.NText, typeof __VLS_components.nText, ]} */ ;
            // @ts-ignore
            const __VLS_336 = __VLS_asFunctionalComponent(__VLS_335, new __VLS_335({
                strong: true,
            }));
            const __VLS_337 = __VLS_336({
                strong: true,
            }, ...__VLS_functionalComponentArgsRest(__VLS_336));
            __VLS_338.slots.default;
            (user.full_name || 'Unnamed');
            var __VLS_338;
            if (user.email) {
                const __VLS_339 = {}.NText;
                /** @type {[typeof __VLS_components.NText, typeof __VLS_components.nText, typeof __VLS_components.NText, typeof __VLS_components.nText, ]} */ ;
                // @ts-ignore
                const __VLS_340 = __VLS_asFunctionalComponent(__VLS_339, new __VLS_339({}));
                const __VLS_341 = __VLS_340({}, ...__VLS_functionalComponentArgsRest(__VLS_340));
                __VLS_342.slots.default;
                (user.email);
                var __VLS_342;
            }
            if (user.emp_id) {
                const __VLS_343 = {}.NText;
                /** @type {[typeof __VLS_components.NText, typeof __VLS_components.nText, typeof __VLS_components.NText, typeof __VLS_components.nText, ]} */ ;
                // @ts-ignore
                const __VLS_344 = __VLS_asFunctionalComponent(__VLS_343, new __VLS_343({}));
                const __VLS_345 = __VLS_344({}, ...__VLS_functionalComponentArgsRest(__VLS_344));
                __VLS_346.slots.default;
                (user.emp_id);
                var __VLS_346;
            }
            var __VLS_330;
            {
                const { footer: __VLS_thisSlot } = __VLS_326.slots;
                const __VLS_347 = {}.NSpace;
                /** @type {[typeof __VLS_components.NSpace, typeof __VLS_components.nSpace, typeof __VLS_components.NSpace, typeof __VLS_components.nSpace, ]} */ ;
                // @ts-ignore
                const __VLS_348 = __VLS_asFunctionalComponent(__VLS_347, new __VLS_347({}));
                const __VLS_349 = __VLS_348({}, ...__VLS_functionalComponentArgsRest(__VLS_348));
                __VLS_350.slots.default;
                const __VLS_351 = {}.NButton;
                /** @type {[typeof __VLS_components.NButton, typeof __VLS_components.nButton, typeof __VLS_components.NButton, typeof __VLS_components.nButton, ]} */ ;
                // @ts-ignore
                const __VLS_352 = __VLS_asFunctionalComponent(__VLS_351, new __VLS_351({
                    ...{ 'onClick': {} },
                    size: "tiny",
                }));
                const __VLS_353 = __VLS_352({
                    ...{ 'onClick': {} },
                    size: "tiny",
                }, ...__VLS_functionalComponentArgsRest(__VLS_352));
                let __VLS_355;
                let __VLS_356;
                let __VLS_357;
                const __VLS_358 = {
                    onClick: (...[$event]) => {
                        if (!(__VLS_ctx.bulkAddMode && __VLS_ctx.pendingUsers.length > 0))
                            return;
                        __VLS_ctx.editPendingUser(i);
                    }
                };
                __VLS_354.slots.default;
                var __VLS_354;
                const __VLS_359 = {}.NButton;
                /** @type {[typeof __VLS_components.NButton, typeof __VLS_components.nButton, typeof __VLS_components.NButton, typeof __VLS_components.nButton, ]} */ ;
                // @ts-ignore
                const __VLS_360 = __VLS_asFunctionalComponent(__VLS_359, new __VLS_359({
                    ...{ 'onClick': {} },
                    size: "tiny",
                    type: "error",
                }));
                const __VLS_361 = __VLS_360({
                    ...{ 'onClick': {} },
                    size: "tiny",
                    type: "error",
                }, ...__VLS_functionalComponentArgsRest(__VLS_360));
                let __VLS_363;
                let __VLS_364;
                let __VLS_365;
                const __VLS_366 = {
                    onClick: (...[$event]) => {
                        if (!(__VLS_ctx.bulkAddMode && __VLS_ctx.pendingUsers.length > 0))
                            return;
                        __VLS_ctx.removePendingUser(i);
                    }
                };
                __VLS_362.slots.default;
                var __VLS_362;
                var __VLS_350;
            }
            var __VLS_326;
        }
    }
    const __VLS_367 = {}.NSpace;
    /** @type {[typeof __VLS_components.NSpace, typeof __VLS_components.nSpace, typeof __VLS_components.NSpace, typeof __VLS_components.nSpace, ]} */ ;
    // @ts-ignore
    const __VLS_368 = __VLS_asFunctionalComponent(__VLS_367, new __VLS_367({
        justify: "end",
    }));
    const __VLS_369 = __VLS_368({
        justify: "end",
    }, ...__VLS_functionalComponentArgsRest(__VLS_368));
    __VLS_370.slots.default;
    const __VLS_371 = {}.NButton;
    /** @type {[typeof __VLS_components.NButton, typeof __VLS_components.nButton, typeof __VLS_components.NButton, typeof __VLS_components.nButton, ]} */ ;
    // @ts-ignore
    const __VLS_372 = __VLS_asFunctionalComponent(__VLS_371, new __VLS_371({
        ...{ 'onClick': {} },
    }));
    const __VLS_373 = __VLS_372({
        ...{ 'onClick': {} },
    }, ...__VLS_functionalComponentArgsRest(__VLS_372));
    let __VLS_375;
    let __VLS_376;
    let __VLS_377;
    const __VLS_378 = {
        onClick: (__VLS_ctx.closeUserModal)
    };
    __VLS_374.slots.default;
    var __VLS_374;
    if (__VLS_ctx.bulkAddMode) {
        const __VLS_379 = {}.NButton;
        /** @type {[typeof __VLS_components.NButton, typeof __VLS_components.nButton, typeof __VLS_components.NButton, typeof __VLS_components.nButton, ]} */ ;
        // @ts-ignore
        const __VLS_380 = __VLS_asFunctionalComponent(__VLS_379, new __VLS_379({
            ...{ 'onClick': {} },
            type: "primary",
            disabled: (!__VLS_ctx.canSaveNext),
            loading: (__VLS_ctx.checkingDuplicates),
        }));
        const __VLS_381 = __VLS_380({
            ...{ 'onClick': {} },
            type: "primary",
            disabled: (!__VLS_ctx.canSaveNext),
            loading: (__VLS_ctx.checkingDuplicates),
        }, ...__VLS_functionalComponentArgsRest(__VLS_380));
        let __VLS_383;
        let __VLS_384;
        let __VLS_385;
        const __VLS_386 = {
            onClick: (__VLS_ctx.saveAndNext)
        };
        __VLS_382.slots.default;
        (__VLS_ctx.editIndex === null ? 'Save & Next' : 'Update & Next');
        var __VLS_382;
    }
    const __VLS_387 = {}.NButton;
    /** @type {[typeof __VLS_components.NButton, typeof __VLS_components.nButton, typeof __VLS_components.NButton, typeof __VLS_components.nButton, ]} */ ;
    // @ts-ignore
    const __VLS_388 = __VLS_asFunctionalComponent(__VLS_387, new __VLS_387({
        ...{ 'onClick': {} },
        type: "primary",
        disabled: (!__VLS_ctx.canSubmit),
    }));
    const __VLS_389 = __VLS_388({
        ...{ 'onClick': {} },
        type: "primary",
        disabled: (!__VLS_ctx.canSubmit),
    }, ...__VLS_functionalComponentArgsRest(__VLS_388));
    let __VLS_391;
    let __VLS_392;
    let __VLS_393;
    const __VLS_394 = {
        onClick: (...[$event]) => {
            __VLS_ctx.bulkAddMode ? __VLS_ctx.finishBulkAdd() : __VLS_ctx.submitUser();
        }
    };
    __VLS_390.slots.default;
    (__VLS_ctx.bulkAddMode ? 'Finish & Save All' : 'Save');
    var __VLS_390;
    var __VLS_370;
    var __VLS_318;
}
var __VLS_240;
var __VLS_236;
const __VLS_395 = {}.NModal;
/** @type {[typeof __VLS_components.NModal, typeof __VLS_components.nModal, typeof __VLS_components.NModal, typeof __VLS_components.nModal, ]} */ ;
// @ts-ignore
const __VLS_396 = __VLS_asFunctionalComponent(__VLS_395, new __VLS_395({
    show: (__VLS_ctx.showUserPermModal),
    maskClosable: (false),
    ...{ class: "perm-modal" },
}));
const __VLS_397 = __VLS_396({
    show: (__VLS_ctx.showUserPermModal),
    maskClosable: (false),
    ...{ class: "perm-modal" },
}, ...__VLS_functionalComponentArgsRest(__VLS_396));
__VLS_398.slots.default;
const __VLS_399 = {}.NCard;
/** @type {[typeof __VLS_components.NCard, typeof __VLS_components.nCard, typeof __VLS_components.NCard, typeof __VLS_components.nCard, ]} */ ;
// @ts-ignore
const __VLS_400 = __VLS_asFunctionalComponent(__VLS_399, new __VLS_399({
    ...{ class: "modal-card" },
}));
const __VLS_401 = __VLS_400({
    ...{ class: "modal-card" },
}, ...__VLS_functionalComponentArgsRest(__VLS_400));
__VLS_402.slots.default;
{
    const { header: __VLS_thisSlot } = __VLS_402.slots;
    const __VLS_403 = {}.NText;
    /** @type {[typeof __VLS_components.NText, typeof __VLS_components.nText, typeof __VLS_components.NText, typeof __VLS_components.nText, ]} */ ;
    // @ts-ignore
    const __VLS_404 = __VLS_asFunctionalComponent(__VLS_403, new __VLS_403({
        strong: true,
    }));
    const __VLS_405 = __VLS_404({
        strong: true,
    }, ...__VLS_functionalComponentArgsRest(__VLS_404));
    __VLS_406.slots.default;
    (__VLS_ctx.editingUser?.name || '');
    var __VLS_406;
}
const __VLS_407 = {}.NForm;
/** @type {[typeof __VLS_components.NForm, typeof __VLS_components.nForm, typeof __VLS_components.NForm, typeof __VLS_components.nForm, ]} */ ;
// @ts-ignore
const __VLS_408 = __VLS_asFunctionalComponent(__VLS_407, new __VLS_407({
    model: (__VLS_ctx.permForm),
    ref: "permFormRef",
}));
const __VLS_409 = __VLS_408({
    model: (__VLS_ctx.permForm),
    ref: "permFormRef",
}, ...__VLS_functionalComponentArgsRest(__VLS_408));
/** @type {typeof __VLS_ctx.permFormRef} */ ;
var __VLS_411 = {};
__VLS_410.slots.default;
for (const [page] of __VLS_getVForSourceType((__VLS_ctx.aclPages))) {
    const __VLS_413 = {}.NFormItem;
    /** @type {[typeof __VLS_components.NFormItem, typeof __VLS_components.nFormItem, typeof __VLS_components.NFormItem, typeof __VLS_components.nFormItem, ]} */ ;
    // @ts-ignore
    const __VLS_414 = __VLS_asFunctionalComponent(__VLS_413, new __VLS_413({
        key: (page.id),
        label: (page.name),
        ...{ class: "perm-row" },
    }));
    const __VLS_415 = __VLS_414({
        key: (page.id),
        label: (page.name),
        ...{ class: "perm-row" },
    }, ...__VLS_functionalComponentArgsRest(__VLS_414));
    __VLS_416.slots.default;
    const __VLS_417 = {}.NIcon;
    /** @type {[typeof __VLS_components.NIcon, typeof __VLS_components.nIcon, ]} */ ;
    // @ts-ignore
    const __VLS_418 = __VLS_asFunctionalComponent(__VLS_417, new __VLS_417({
        component: (page.iconComponent),
        size: "20",
    }));
    const __VLS_419 = __VLS_418({
        component: (page.iconComponent),
        size: "20",
    }, ...__VLS_functionalComponentArgsRest(__VLS_418));
    const __VLS_421 = {}.NSelect;
    /** @type {[typeof __VLS_components.NSelect, typeof __VLS_components.nSelect, ]} */ ;
    // @ts-ignore
    const __VLS_422 = __VLS_asFunctionalComponent(__VLS_421, new __VLS_421({
        value: (__VLS_ctx.permForm[page.id]),
        options: (__VLS_ctx.getPermissionOptions(page.id)),
        placeholder: "Permission",
    }));
    const __VLS_423 = __VLS_422({
        value: (__VLS_ctx.permForm[page.id]),
        options: (__VLS_ctx.getPermissionOptions(page.id)),
        placeholder: "Permission",
    }, ...__VLS_functionalComponentArgsRest(__VLS_422));
    __VLS_asFunctionalElement(__VLS_intrinsicElements.span)({
        ...{ class: "perm-spacer" },
    });
    const __VLS_425 = {}.NText;
    /** @type {[typeof __VLS_components.NText, typeof __VLS_components.nText, typeof __VLS_components.NText, typeof __VLS_components.nText, ]} */ ;
    // @ts-ignore
    const __VLS_426 = __VLS_asFunctionalComponent(__VLS_425, new __VLS_425({
        depth: "3",
        ...{ class: "perm-hint" },
    }));
    const __VLS_427 = __VLS_426({
        depth: "3",
        ...{ class: "perm-hint" },
    }, ...__VLS_functionalComponentArgsRest(__VLS_426));
    __VLS_428.slots.default;
    (__VLS_ctx.getPermissionHint(page.id, __VLS_ctx.permForm[page.id]));
    var __VLS_428;
    var __VLS_416;
}
var __VLS_410;
{
    const { footer: __VLS_thisSlot } = __VLS_402.slots;
    const __VLS_429 = {}.NSpace;
    /** @type {[typeof __VLS_components.NSpace, typeof __VLS_components.nSpace, typeof __VLS_components.NSpace, typeof __VLS_components.nSpace, ]} */ ;
    // @ts-ignore
    const __VLS_430 = __VLS_asFunctionalComponent(__VLS_429, new __VLS_429({
        justify: "space-between",
        align: "center",
        ...{ class: "perm-footer-space" },
    }));
    const __VLS_431 = __VLS_430({
        justify: "space-between",
        align: "center",
        ...{ class: "perm-footer-space" },
    }, ...__VLS_functionalComponentArgsRest(__VLS_430));
    __VLS_432.slots.default;
    const __VLS_433 = {}.NButton;
    /** @type {[typeof __VLS_components.NButton, typeof __VLS_components.nButton, typeof __VLS_components.NButton, typeof __VLS_components.nButton, ]} */ ;
    // @ts-ignore
    const __VLS_434 = __VLS_asFunctionalComponent(__VLS_433, new __VLS_433({
        ...{ 'onClick': {} },
    }));
    const __VLS_435 = __VLS_434({
        ...{ 'onClick': {} },
    }, ...__VLS_functionalComponentArgsRest(__VLS_434));
    let __VLS_437;
    let __VLS_438;
    let __VLS_439;
    const __VLS_440 = {
        onClick: (__VLS_ctx.closeUserPermissionsModal)
    };
    __VLS_436.slots.default;
    var __VLS_436;
    /** @type {[typeof PermissionWrapper, typeof PermissionWrapper, ]} */ ;
    // @ts-ignore
    const __VLS_441 = __VLS_asFunctionalComponent(PermissionWrapper, new PermissionWrapper({
        resource: "usermanagement",
        operation: "write",
    }));
    const __VLS_442 = __VLS_441({
        resource: "usermanagement",
        operation: "write",
    }, ...__VLS_functionalComponentArgsRest(__VLS_441));
    __VLS_443.slots.default;
    const __VLS_444 = {}.NButton;
    /** @type {[typeof __VLS_components.NButton, typeof __VLS_components.nButton, typeof __VLS_components.NButton, typeof __VLS_components.nButton, ]} */ ;
    // @ts-ignore
    const __VLS_445 = __VLS_asFunctionalComponent(__VLS_444, new __VLS_444({
        ...{ 'onClick': {} },
        type: "primary",
        loading: (__VLS_ctx.savingPerms),
    }));
    const __VLS_446 = __VLS_445({
        ...{ 'onClick': {} },
        type: "primary",
        loading: (__VLS_ctx.savingPerms),
    }, ...__VLS_functionalComponentArgsRest(__VLS_445));
    let __VLS_448;
    let __VLS_449;
    let __VLS_450;
    const __VLS_451 = {
        onClick: (__VLS_ctx.submitUserPermissions)
    };
    __VLS_447.slots.default;
    var __VLS_447;
    var __VLS_443;
    var __VLS_432;
}
var __VLS_402;
var __VLS_398;
var __VLS_3;
/** @type {__VLS_StyleScopedClasses['toolbar']} */ ;
/** @type {__VLS_StyleScopedClasses['search-input']} */ ;
/** @type {__VLS_StyleScopedClasses['button-group']} */ ;
/** @type {__VLS_StyleScopedClasses['action-button']} */ ;
/** @type {__VLS_StyleScopedClasses['toggle-extras']} */ ;
/** @type {__VLS_StyleScopedClasses['action-button']} */ ;
/** @type {__VLS_StyleScopedClasses['bulk-action-buttons']} */ ;
/** @type {__VLS_StyleScopedClasses['action-button']} */ ;
/** @type {__VLS_StyleScopedClasses['action-button']} */ ;
/** @type {__VLS_StyleScopedClasses['user-table']} */ ;
/** @type {__VLS_StyleScopedClasses['show-extras']} */ ;
/** @type {__VLS_StyleScopedClasses['user-table']} */ ;
/** @type {__VLS_StyleScopedClasses['show-extras']} */ ;
/** @type {__VLS_StyleScopedClasses['bulk-modal-content']} */ ;
/** @type {__VLS_StyleScopedClasses['selected-users-section']} */ ;
/** @type {__VLS_StyleScopedClasses['user-list']} */ ;
/** @type {__VLS_StyleScopedClasses['bulk-form']} */ ;
/** @type {__VLS_StyleScopedClasses['form-actions']} */ ;
/** @type {__VLS_StyleScopedClasses['changes-list']} */ ;
/** @type {__VLS_StyleScopedClasses['change-item']} */ ;
/** @type {__VLS_StyleScopedClasses['clear-indicator']} */ ;
/** @type {__VLS_StyleScopedClasses['confirmation-user-list']} */ ;
/** @type {__VLS_StyleScopedClasses['user-form-grid']} */ ;
/** @type {__VLS_StyleScopedClasses['cards-container']} */ ;
/** @type {__VLS_StyleScopedClasses['pending-card']} */ ;
/** @type {__VLS_StyleScopedClasses['perm-modal']} */ ;
/** @type {__VLS_StyleScopedClasses['modal-card']} */ ;
/** @type {__VLS_StyleScopedClasses['perm-row']} */ ;
/** @type {__VLS_StyleScopedClasses['perm-spacer']} */ ;
/** @type {__VLS_StyleScopedClasses['perm-hint']} */ ;
/** @type {__VLS_StyleScopedClasses['perm-footer-space']} */ ;
// @ts-ignore
var __VLS_246 = __VLS_245, __VLS_412 = __VLS_411;
var __VLS_dollars;
const __VLS_self = (await import('vue')).defineComponent({
    setup() {
        return {
            PermissionWrapper: PermissionWrapper,
            iconMap: iconMap,
            NInput: NInput,
            NInputNumber: NInputNumber,
            NButton: NButton,
            NDataTable: NDataTable,
            NTabs: NTabs,
            NTabPane: NTabPane,
            NModal: NModal,
            NForm: NForm,
            NFormItem: NFormItem,
            NSelect: NSelect,
            NText: NText,
            NIcon: NIcon,
            editIndex: editIndex,
            bulkAddMode: bulkAddMode,
            showExtras: showExtras,
            responsiveColumns: responsiveColumns,
            loadingUsers: loadingUsers,
            selectedRowKeys: selectedRowKeys,
            activeTab: activeTab,
            searchQuery: searchQuery,
            showBulkModal: showBulkModal,
            showUserModal: showUserModal,
            editingUser: editingUser,
            userForm: userForm,
            userFormRef: userFormRef,
            showUserPermModal: showUserPermModal,
            savingPerms: savingPerms,
            aclPages: aclPages,
            permForm: permForm,
            permFormRef: permFormRef,
            checkingDuplicates: checkingDuplicates,
            pendingUsers: pendingUsers,
            showBulkConfirm: showBulkConfirm,
            showDeleteConfirm: showDeleteConfirm,
            bulkForm: bulkForm,
            changesList: changesList,
            canSaveNext: canSaveNext,
            canSubmit: canSubmit,
            confirmBulkUpdate: confirmBulkUpdate,
            markFieldDirty: markFieldDirty,
            resetBulkForm: resetBulkForm,
            cancelBulkEdit: cancelBulkEdit,
            statusOptions: statusOptions,
            roleOptions: roleOptions,
            canWrite: canWrite,
            filteredActiveUsers: filteredActiveUsers,
            filteredInactiveUsers: filteredInactiveUsers,
            selectedUserNames: selectedUserNames,
            getPermissionOptions: getPermissionOptions,
            getPermissionHint: getPermissionHint,
            editPendingUser: editPendingUser,
            saveAndNext: saveAndNext,
            removePendingUser: removePendingUser,
            finishBulkAdd: finishBulkAdd,
            handleBulkModeChange: handleBulkModeChange,
            performBulkDelete: performBulkDelete,
            openAddUserModal: openAddUserModal,
            closeUserModal: closeUserModal,
            submitUser: submitUser,
            submitUserPermissions: submitUserPermissions,
            performBulkUpdate: performBulkUpdate,
            closeUserPermissionsModal: closeUserPermissionsModal,
        };
    },
});
export default (await import('vue')).defineComponent({
    setup() {
        return {};
    },
});
; /* PartiallyEnd: #4569/main.vue */
//# sourceMappingURL=UserManagement.vue.js.map